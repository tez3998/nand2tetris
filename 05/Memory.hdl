// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    // 書き込むかどうかを決定
    Not(in=address[14], out=notAddress14);
    Not(in=address[13], out=notAddress13);

    And(a=load, b=notAddress14, out=loadToRam16k);

    And(a=address[14], b=notAddress13, out=sInternal);
    And(a=load, b=sInternal, out=loadToScreen);

    // 書き込みと読み込み実行（書き込みはload=1のときのみ）
    RAM16K(in=in, load=loadToRam16k, address=address[0..13], out=rOut);

    Screen(in=in, load=loadToScreen, address=address[0..12], out=sOut);

    Keyboard(out=kOut);

    // 最終出力を決定
    //Mux4Way16(a=rOut, b=false, c=sOut, d=kOut, sel=address[13..14], out=out);
    Mux16(a=sOut, b=kOut, sel=address[13], out=skOut);
    Mux16(a=rOut, b=skOut, sel=address[14], out=out);
}